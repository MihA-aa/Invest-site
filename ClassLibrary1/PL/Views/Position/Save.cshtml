@model PL.Models.PositionModel
<h2 style="margin-top: 5px;">Save</h2>

<style>
    .bootstrap-select:not([class*="col-"]):not([class*="form-control"]):not(.input-group-btn) {
    width: 280px;
    }
    .myLabelFor {
        white-space: nowrap; 
        overflow: hidden; 
        margin-left: -5px; 
        margin-right: 5px;
    }
</style>

@{
    #region
    var tradeTypelist = new List<SelectListItem>
            {
                new SelectListItem
                {
                    Text = "Long",
                    Value = "Long"
                },
                new SelectListItem
                {
                    Text = "Short",
                    Value = "Short"
                }
            };
    var TradeStatuslist = new List<SelectListItem>
            {
                new SelectListItem
                {
                    Text = "Open",
                    Value = "Open"
                },
                new SelectListItem
                {
                    Text = "Close",
                    Value = "Close"
                },
                new SelectListItem
                {
                    Text = "Wait",
                    Value = "Wait"
                }
            };
    #endregion
}

@using (Html.BeginForm("Save", "Position", FormMethod.Post, new { id = "popupForm" }))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true, "", new { @class = "text-danger validation-summary-errors" })
    @Html.HiddenFor(m => m.Id);
    @Html.HiddenFor(m => m.CurrentPrice);
    @Html.HiddenFor(m => m.Gain);
    @Html.HiddenFor(m => m.AbsoluteGain);
    @Html.HiddenFor(m => m.MaxGain);
    @Html.HiddenFor(m => m.SymbolId, new { id = "SymbolIdHidden" });

    <div class="form-group">
        @Html.LabelFor(m => m.SymbolName, new {@class = "col-md-2 control-label"})
        @Html.TextBoxFor(a => a.SymbolName, new
        {
            @class = "form-control", id = "input-symbol-search",
            data_autocomplete_source = Url.Action("AutocompleteSymbolSearch", "Nav"), onChange = "completeInputSymbolData()"
        })
        @Html.ValidationMessageFor(a => a.SymbolName)
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.Name, new { @class = "col-md-2 control-label "})
        @Html.TextBoxFor(a => a.Name, new { @class = "form-control", id = "TextBoxForSymbolName" })
        @Html.ValidationMessageFor(a => a.Name)
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.TradeType, new { style = "margin-right: 15px;" })
        @Html.DropDownListFor(model => model.TradeType, tradeTypelist, new { @class = "selectpicker", style = "width: 280px;" })
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.OpenWeight, new { @class = "col-md-2 control-label"})
        @Html.TextBoxFor(a => a.OpenWeight, new { Value = Model?.OpenWeight.ToString() ?? "1", @class = "form-control"})
        @Html.ValidationMessageFor(a => a.OpenWeight)
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.OpenDate, new {@class = "col-md-2 control-label myLabelFor"})
        <div class='input-group date' id='datetimepicker1' style="padding-right: 190px;">
            @Html.TextBoxFor(a => a.OpenDate, new {@data_val = "false", id= "SymbolOpenDate",
           @class = "form-control", style = "width: 241px;"})
            <span class="input-group-addon">
                <span class="glyphicon glyphicon-calendar"></span>
            </span>
        </div>
        @Html.ValidationMessageFor(a => a.OpenDate)
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.OpenPrice, new { @class = "col-md-2 control-label myLabelFor"})
        @Html.TextBoxFor(a => a.OpenPrice, new { id = "SymbolOpenPrice", data_val = "false", @class = "form-control fucking-decimal-input", @readonly = true })
        @Html.ValidationMessageFor(a => a.OpenPrice)
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.TradeStatus, new { style = "margin-right: 5px;" })
        @Html.DropDownListFor(model => model.TradeStatus, TradeStatuslist, new
   {
       id= "TradeStatus", @class = "selectpicker", style = "width: 280px;", onchange = "tradeStatusCheck(this);"
   })
    </div>
    <div id="FromForClosePosition" style="display: none">
        <div class="form-group">
            @Html.LabelFor(m => m.CloseDate, new { @class = "col-md-2 control-label myLabelFor"})
            <div class='input-group date' id='datetimepicker2' style="padding-right: 190px;">
                @Html.TextBoxFor(a => a.CloseDate, new { @data_val = "false", @class = "form-control", style = "width: 241px;",  id= "CloseDateinput" })
                <span class="input-group-addon">
                    <span class="glyphicon glyphicon-calendar"></span>
                </span>
            </div>
            @Html.ValidationMessageFor(a => a.CloseDate)
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.ClosePrice, new { @class = "col-md-2 control-label myLabelFor"})
            @Html.TextBoxFor(a => a.ClosePrice, new {id= "SymbolClosePrice", @data_val = "false",
           @class = "form-control fucking-decimal-input", @readonly = true })
            @Html.ValidationMessageFor(a => a.ClosePrice)
        </div>
    </div>

    <div class="form-group" style ="margin-bottom: 40px;">
        <div class="col-md-offset-2">
            <input type="submit" value="Save" class="btn btn-default" id="FormSaveSubmit"/>
        </div>
    </div>
}

@Scripts.Render("~/bundles/myScriptSave")
