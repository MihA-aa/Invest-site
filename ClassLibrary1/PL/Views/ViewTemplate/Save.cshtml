@model PL.Models.ViewTemplateModel
<h2 style="margin-top: 5px;">Save</h2>

<style>
    .bootstrap-select:not([class*="col-"]):not([class*="form-control"]):not(.input-group-btn) {
        width: 280px;
    }

    .myLabelFor {
        white-space: nowrap;
        overflow: hidden;
        margin-left: -5px;
        margin-right: 5px;
    }
</style>

@{
    #region
    var showPositionslist = new List<SelectListItem>
            {
                new SelectListItem
                {
                    Text = "All",
                    Value = "All"
                },
                new SelectListItem
                {
                    Text = "ClosedOnly",
                    Value = "ClosedOnly"
                },
                new SelectListItem
                {
                    Text = "OpenAndWaiting",
                    Value = "OpenAndWaiting"
                },
                new SelectListItem
                {
                    Text = "OpenOnly",
                    Value = "OpenOnly"
                }
            };
    var positionSortinglist = new List<SelectListItem>
            {
                new SelectListItem
                {
                    Text = "ASC",
                    Value = "ASC"
                },
                new SelectListItem
                {
                    Text = "DESC",
                    Value = "DESC"
                }
            };
    #endregion
}

@using (Html.BeginForm("Save", "ViewTemplate", FormMethod.Post, new { id = "popupViewTampleteForm" }))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true, "", new { @class = "text-danger validation-summary-errors" })
    @Html.HiddenFor(m => m.Id);

    <div class="form-group">
        @Html.LabelFor(m => m.Name, new {@class = "col-md-2 control-label ", style= "margin-right: 31px;" })
        @Html.TextBoxFor(a => a.Name, new {@class = "form-control", id = "TextBoxForSymbolName"})
        @Html.ValidationMessageFor(a => a.Name)
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.Positions, new { style = "margin-right: 15px;" })
        @Html.DropDownListFor(model => model.Positions, showPositionslist, new { @class = "selectpicker", style = "width: 280px;" })
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.ShowPortfolioStats, new
        {
            @class = "col-md-2 control-label", style = "padding: 0; white-space: nowrap; margin-right: 30px;"
        })
        @(Model == null ? Html.CheckBoxFor(m => m.ShowPortfolioStats, new {style = "margin-left: 40px;"})
              : Html.CheckBoxFor(m => m.ShowPortfolioStats, new {@checked = "checked", style = "margin-left: 40px;"}))
    </div>
    if (Model != null && Model.Columns.Any())
    {
        <div class="form-group">
            @Html.LabelFor(model => model.Columns)
            <br />
            @Html.DropDownListFor(model => model.SortColumnId, Model.Columns as SelectList, new { @class = "selectpicker" })
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.SortOrder, new { style = "margin-right: 15px;" })
            @Html.DropDownListFor(model => model.SortOrder, positionSortinglist, new { @class = "selectpicker", style = "width: 280px;" })
        </div>
    }


    <div class="form-group" style="margin-bottom: 40px;">
        <div class="col-md-offset-2">
            <input type="submit" value="Save" class="btn btn-default" id="FormSaveSubmit" />
        </div>
    </div>
}

@Scripts.Render("~/bundles/myScriptViewTampleteSave")